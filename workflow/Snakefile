'''
This is the main script that has to be executed.
Includes all the Snakefiles needed to execute the workflow.
'''

#Configuration yaml.
configfile: "config/config.yaml"


#Global variables
data_dir = config["data_dir"]
results_dir = config["results_dir"]
barcodes = config["barcodes_file"]
ref_genome = config["ref_genome"]
ref_genome_ext = config["ref_genome_ext"]
sample_file_name = config["sample_file_name"]
sample_ext = config["sample_ext"]
sample_names=["unknown_sample"]


#Global function
def get_sample_names_from_barcodes():
    """
    A function to get the sample names from the barcode file.
    :return: This'll update the global samples_names variable to contain all the samples
            from the barcode file
    """
    with open(f"{barcodes}", "r") as barcode_file:
        for line in barcode_file:
            split_line = line.strip().split("\t")
            if split_line[1].split("_R")[0] not in sample_names:
                sample_names.append(split_line[1].split("_R")[0])
    return sample_names

#Included rules
include: "Rules/Fasta.smk"
include: "Rules/Mapping.smk"
include: "Rules/Trimming.smk"
include: "Rules/Variant-calling.smk"
include: "Rules/Graph_plotting.smk"


#Output is the variant file and the plotted variants.
rule all:
    input:
        expand(f"{results_dir}/pileups/{{sample_name}}.pileup.vcf", sample_name = sample_names),
        f"{results_dir}/variants.png"

rule generate_test_fasta_files:
    message:
        "Generating 1000 reads in forward & reverse."
    shell:
        """
        python Scripts/Random_fasta_generator.py -l 1000 -o testdata
        """
        